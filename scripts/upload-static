#!/usr/bin/env python

import click
import os
import subprocess
from StringIO import StringIO
from threading import Thread
from Queue import Queue


Q = Queue()
END = object()
ROOT = 'src/sentry/static/'

FAILED = False

git_sha = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()


def get_bucket(bucket):
    from google.cloud import storage
    from google.cloud.storage.bucket import Bucket
    return Bucket(storage.Client(), bucket)


def worker(bucket_name, verbose):
    global FAILED

    bucket = get_bucket(bucket_name)

    while True:
        work = Q.get()
        if work is END:
            return

        attempts = 5

        # Attempt the upload a few times
        for i in range(attempts):
            # Check for a gzipped version to upload instead
            gzip = False
            try:
                fp = open(work + '.gz', 'rb')
                gzip = True
            except IOError:
                fp = open(work, 'rb')

            try:
                obj = bucket.blob(os.path.join(git_sha, work[len(ROOT):]))
                obj.content_type = mimetypes.guess_type(work)[0] or 'application/octet-stream'
                obj.cache_control = 'public,max-age=315360000'
                if gzip:
                    obj.content_encoding = 'gzip'
                if verbose:
                    click.echo('Uploading %s attempt number %s' % (work, i))
                obj.upload_from_file(fp)
            except Exception:
                if i == attempts - 1:
                    FAILED = True
                else:
                    import traceback
                    import time
                    traceback.print_exc()
                    click.echo('Failed to upload %r, trying again...' % work)
                    time.sleep(0.5)
            finally:
                fp.close()


@click.command()
@click.option('--bucket', 'bucket_name', required=True)
@click.option('--threads', 'n_threads', default=1)
@click.option('--force', is_flag=True)
@click.option('--verbose', is_flag=True)
def main(bucket_name, n_threads, force, verbose):
    bucket = get_bucket(bucket_name)

    if not force:
        # Check for our .complete marker, if found, abort early
        if bucket.blob(os.path.join(git_sha, '.complete')).exists():
            click.echo('!! Files have already been uploaded, skipping')
            return

    for dirpath, dirnames, filenames in os.walk(ROOT):
        if 'CACHE' in dirpath.split('/'):
            continue
        for filename in filenames:
            if filename.endswith(('.gz', '.map', '.less', '.jsx', '.snap', '.py')):
                continue
            Q.put(os.path.join(dirpath, filename))

    for _ in xrange(n_threads):
        Q.put(END)

    threads = []
    for _ in xrange(n_threads):
        t = Thread(target=worker, args=(bucket_name, verbose))
        t.setDaemon(True)
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    if FAILED:
        raise click.ClickException('wups uploading failed')

    # Store marker saying that this sha is complete
    obj = bucket.blob(os.path.join(git_sha, '.complete'))
    obj.upload_from_file(StringIO())


# HACK(mattrobenolt): This mime.types file is deployed to our nginx
# servers, but when uploading to S3, we need to explicitly declare the
# Content-Type upon uploading. So I am stuffing this here to make sure
# we maintain the correct Content-Types.
from mimetypes import MimeTypes
mimetypes = MimeTypes()
mimetypes.readfp(StringIO("""
  # Data interchange

    application/atom+xml                  atom
    application/json                      json map topojson
    application/ld+json                   jsonld
    application/rss+xml                   rss
    application/vnd.geo+json              geojson
    application/xml                       rdf xml


  # JavaScript

    # Normalize to standard type.
    # https://tools.ietf.org/html/rfc4329#section-7.2
    application/javascript                js


  # Manifest files

    application/manifest+json             webmanifest
    application/x-web-app-manifest+json   webapp
    text/cache-manifest                   appcache


  # Media files

    audio/midi                            mid midi kar
    audio/mp4                             aac f4a f4b m4a
    audio/mpeg                            mp3
    audio/ogg                             oga ogg opus
    audio/x-realaudio                     ra
    audio/x-wav                           wav
    image/bmp                             bmp
    image/gif                             gif
    image/jpeg                            jpeg jpg
    image/png                             png
    image/svg+xml                         svg svgz
    image/tiff                            tif tiff
    image/vnd.wap.wbmp                    wbmp
    image/webp                            webp
    image/x-jng                           jng
    video/3gpp                            3gp 3gpp
    video/mp4                             f4p f4v m4v mp4
    video/mpeg                            mpeg mpg
    video/ogg                             ogv
    video/quicktime                       mov
    video/webm                            webm
    video/x-flv                           flv
    video/x-mng                           mng
    video/x-ms-asf                        asf asx
    video/x-ms-wmv                        wmv
    video/x-msvideo                       avi

    # Serving `.ico` image files with a different media type
    # prevents Internet Explorer from displaying then as images:
    # https://github.com/h5bp/html5-boilerplate/commit/37b5fec090d00f38de64b591bcddcb205aadf8ee

    image/x-icon                          cur ico


  # Microsoft Office

    application/msword                                                         doc
    application/vnd.ms-excel                                                   xls
    application/vnd.ms-powerpoint                                              ppt
    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx
    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx


  # Web fonts

    application/font-woff                 woff
    application/font-woff2                woff2
    application/vnd.ms-fontobject         eot

    # Browsers usually ignore the font media types and simply sniff
    # the bytes to figure out the font type.
    # https://mimesniff.spec.whatwg.org/#matching-a-font-type-pattern
    #
    # However, Blink and WebKit based browsers will show a warning
    # in the console if the following font types are served with any
    # other media types.

    application/x-font-ttf                ttc ttf
    font/opentype                         otf


  # Other

    application/java-archive              ear jar war
    application/mac-binhex40              hqx
    application/octet-stream              bin deb dll dmg exe img iso msi msm msp safariextz
    application/pdf                       pdf
    application/postscript                ai eps ps
    application/rtf                       rtf
    application/vnd.google-earth.kml+xml  kml
    application/vnd.google-earth.kmz      kmz
    application/vnd.wap.wmlc              wmlc
    application/x-7z-compressed           7z
    application/x-bb-appworld             bbaw
    application/x-bittorrent              torrent
    application/x-chrome-extension        crx
    application/x-cocoa                   cco
    application/x-java-archive-diff       jardiff
    application/x-java-jnlp-file          jnlp
    application/x-makeself                run
    application/x-opera-extension         oex
    application/x-perl                    pl pm
    application/x-pilot                   pdb prc
    application/x-rar-compressed          rar
    application/x-redhat-package-manager  rpm
    application/x-sea                     sea
    application/x-shockwave-flash         swf
    application/x-stuffit                 sit
    application/x-tcl                     tcl tk
    application/x-x509-ca-cert            crt der pem
    application/x-xpinstall               xpi
    application/xhtml+xml                 xhtml
    application/xslt+xml                  xsl
    application/zip                       zip
    text/css                              css
    text/html                             htm html shtml
    text/mathml                           mml
    text/plain                            txt
    text/vcard                            vcard vcf
    text/vnd.rim.location.xloc            xloc
    text/vnd.sun.j2me.app-descriptor      jad
    text/vnd.wap.wml                      wml
    text/vtt                              vtt
    text/x-component                      htc
"""))


if __name__ == '__main__':
    main()
